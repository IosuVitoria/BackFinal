////////////////////////////////////////////////////

CREAR ALUMNO    /alumno  POST

- pone curso en mayusculas
- valida campo recibido curso para que sea del tipo numero+letra mayuscual (1B)
- valida campo email
- guarda alumno

- crea usuario para alumno
	- role alumno
	- genera password nombrealumno+curso+$ en mayusculas
	- isLogged=false
- crea usuario role padre
	- role tutor
	- genera password nombretutor+curso+$ en mayusculas
	- isLogged=false
- devuelve JSON con alumno creado, usuario de role alumno y usuario de role tutor
- envia al mail introducido en el registro los datos de los usuarios generados para acceder a la aplicacion (alumno y tutor)



LISTA ALUMNOS   /alumno   GET

- busca en BBDD todos los alumnos
- develve JSON con todos alumnos


ALUMNO BY ID      /alumno/:id   GET

- obtiene id de parametros de url
- busca en BBDD por id
- devuelve JSON con el alumno solicitado


ALUMNO PAGINADO    /alumno/paged   GET

- cuenta numero de alumnos total
- seteamos limite para paginar e iniciamos en pagina 1
- creamos objeto para respuesta con resumen paginacion y resultados



MODIFICAR ALUMNO   /alumno/:id   PUT

- obtiene id de parametros de url
- busca en BBDD por id, controla si id no existe
- si modifica el campo curso se pasa a myuscula y se valida que sea del tipo numero + letra mayuscula (1B)
- si modifica el campo email se valida que tenga formato correcto

- actualiza alumno en BBDD
- devuelve JSON con el alumno modificado


BORRAR ALUMNO       /alumno/:id   DELETE

- obtiene id de parametros de url
- busca en BBDD por id y si existe lo borra
- devuelve JSON con el alumno borrado


////////////////////////////////////////////////////

CREAR PROFESOR    /profesor  POST

- valida campo telefono (9 digitos 0-9)
- valida campo email
- guarda profesor
- crea usuario para profesor
	- role profesor
	- genera password nombreprofesor+2023$ en mayusculas
	- isLogged=false
- envia al mail introducido en el registro los datos del usuario generado para acceder a la aplicacion


LISTA PROFESORES   /profesor   GET

- busca en BBDD todos los profesores
- develve JSON con todos profesores


PROFESOR BY ID      /profesor/:id   GET

- obtiene id de parametros de url
- busca en BBDD por id
- devuelve JSON con el alumno solicitado

MODIFICAR PROFESOR   /profesor/:id   PUT

- obtiene id de parametros de url
- busca en BBDD por id, controla si id no existe
- si modifica el campo telefono  valida que sea del tipo 9 digitos de 0-9
- si modifica el campo email se valida que tenga formato correcto

- actualiza alumno en BBDD
- devuelve JSON con el alumno modificado

BORRAR PROFESOR       /profesor/:id   DELETE

- obtiene id de parametros de url
- busca en BBDD por id y si existe lo borra
- devuelve JSON con el profesor borrado

OBTENER ASIGNATURAS QUE IMPARTE UN PROFESOR Y POR CADA ASIGNATURA LOS ALUMNOS QUE LA RECIBEN
/profesor/notas:id de profesor     GET

- pasar id de profesor en request
- busca las asignaturas que imparte un profesor y despues rellena por cada asignatura un array con las id de los alumnos que dan esa asignatura
- devuelve Json con el objeto descrito anteriormente



////////////////////////////////////////////////////

USUARIO ADMINISTRADOR email=admin@colegio.com     password=Admin123$


REGISTER        /user/register   POST

- se va a usar este endpoint para que admin cree otros usarios admin (jefe estudios, subdirector)
- recoje todos los campos del request body
- valida email y password el formato
- valida email usado 
- encripta password
- setea role a admin y variable isLogge a true
- devuelve JSON con usuario creado


LOGIN           /user/login   POST

- busca todos los datos del usuario buscando por el email recibido de la request y el role tiene que venir en la request tambien (porque tenemos el mismo email para alumno y tutor)
- comprueba si email esta registrado
- condicion si isLogged=false es primer login
	- devuelve mensaje cambiar password y datos usuario
	- desde front redirigir a cambio contase単a (formulario para solo cambiar contrase単a y repetirla, el resto de datos del usuario ya les tenemos)
           |      																						   |
           |
           V

	CAMBIA PASSWORD     /user/:id   PUT

		- desde front request con id, email, y password(la nueva) y ROLE!!!!
		- encriptar password nueva y guardar en bbdd
		- setear islogged=true;
		- devolver usuario como queda tras actualizar

- si no cumple condicion y accede login
- compara contrase単as 
- genera token con JWT
- devuelve token y objeto user con todos datos del usuario de tabla usuarios y objeto entidad con todos los datos del usuario de la entidad seleccionada (aluno, profesor)

LISTAR USUSARIOS     /users    GET

-listado de todos los usuarios

////////////////////////////////////////////////////


LISTAR NOTAS     /notas  GET

- busca en BBDD todos las notas
- develve JSON con todas las notas


LISTAR NOTA POR ID     /notas/:id    GET

- obtiene id de parametros de url
- busca en BBDD por id
- devuelve JSON con la nota solicitada

CREAR NOTA           /notas   POST

- recoge todos datos de formulario (nota 8.7 - id alumno - id asignatura)
- valida nota que sea de formato --- /^([0-9]{1}(\.[0-9]{1,2})?)$/gm--- o puede ser 10
- guarda en BBDD


MODIFICAR NOTA       /notas/:id   PUT

- recoge id de la nota a modificar de la request
- recoge la nota a modificar de la BBDD
- modifica la nota con el valor recogido en la request
- actualiza la nota en BBDD


BORRAR NOTA           /notas/:id   DELETE

- recoge id de la nota a borrar de la request
- comprueba que existe en BBDD 
- borra la nota en BBDD


/////////////////////////////////////////////

NODEMAILER

- en archivo .env esta configuracion de usuario y contrase単a de cuenta de administrador del colegio (email y password)
- en carpeta templates la funcion que recoge datos de cuenta de correo desde la que se envia, destinatario y cuerpo del mail en html
- controla error de envio y si es correcto en consola muesta mensaje de ok



















